@page "/"
@using CDN.Entities
@using CDN.Entities.DbEntity
@using CompleteDeveloperNetworkClient.Service
@inject UserService UserService
@inject SkillService SkillService
@inject HobbyService HobbyService
@inject IJSRuntime JS
<PageTitle>Home</PageTitle>

<h3>User List</h3>

@if (_users == null)
{
    <p>Loading...</p>
}
else
{
    <div>
        <label for="">Username / Email</label>
        <input type="text" @bind-value="@_searchString"/>
        <InputSelect @bind-Value="@_searchType">
            @foreach (var option in Enum.GetValues(typeof(SearchType)))
            {
                <option value="@option">@option</option>
            }
        </InputSelect>
        <button onclick="@SearchUser">Search</button>
        <button onclick="@SearchUser">Delete User</button>
        <button @onclick="ToggleCreateUserSection">+ New User</button>
    </div>

    <div>
        <input type="checkbox" checked="@_showArchivedUsers" @onchange="ToggleArchived"/>
        <label for="">Show Archived Users</label>

    </div>

    <br/>
    <div>
        <table class="user-table">
            <thead>
            <tr>
                <th>Select</th>
                <th>UserName</th>
                <th>Email</th>
                <th>Phone</th>
                <th>Hobbies</th>
                <th>Skills</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var user in UsersFiltered)
            {
                <tr class="@((user.IsArchived ? "archived" : ""))">
                    <td><input type="checkbox" /></td>
                    <td>@user.UserName</td>
                    <td>@user.Email</td>
                    <td>@user.PhoneNumber</td>
                    <td>@string.Join(", ", user.Hobbies.Select(hobby => hobby.HobbyName)?.ToList() ?? [])</td>
                    <td>@string.Join(", ", user.Skills.Select(skill => skill.SkillName)?.ToList() ?? [])</td>
                    <td>
                        <button @onclick="() => ToggleUpdateUserSection(user)">Update</button>
                        @if (user.IsArchived)
                        {
                            <button @onclick="() => UnarchiveUser(user)">Unarchive</button>
                        }
                        else
                        {
                            <button @onclick="() => ArchiveUser(user)">Archive</button>
                        }
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>

    @if (_showCreateUserSection)
    {
        <div>
            <div>
                <h3>Create New User</h3>

                <div>
                    <label>Username:</label>
                    <input @bind="_newUser.UserName" />
                </div>
                <div>
                    <label>Email:</label>
                    <input @bind="_newUser.Email" />
                </div>
                <div>
                    <label>Phone:</label>
                    <input @bind="_newUser.PhoneNumber" />
                </div>

                <div>
                    @foreach (var skill in _skillList)
                    {
                        <option value="@skill.Id">@skill.SkillName</option>
                    }

                    @* <button @onclick="InsertNewSkillAndUpdateUser">Create</button> *@
                </div>

                <div class="modal-actions">
                    <button @onclick="CreateUser">Create</button>
                    @* <button @onclick="AddSkills">Add Skills</button> *@
                    @* <button @onclick="AddHobbies">Add Hobbies</button> *@
                </div>
            </div>
        </div>
    }

    @if (_showUpdateUserSection)
    {
        <div>
            <div>
                <h3>Update User</h3>

                <div>
                    <label>Username:</label>
                    <input @bind="_tobeUpdateUser.UserName" />
                </div>
                <div>
                    <label>Email:</label>
                    <input @bind="_tobeUpdateUser.Email" />
                </div>
                <div>
                    <label>Phone:</label>
                    <input @bind="_tobeUpdateUser.PhoneNumber" />
                </div>

                <div class="modal-actions">
                    <button @onclick="UpdateUser">Update</button>
                    @alertMessage
                </div>
            </div>
        </div>
    }

}

@code {
    private List<UserModel>? _users;
    private readonly UserModel _newUser = new();
    private List<Skill> _skillList = new();
    private List<Hobby> _hobbyList = new();
    private UserModel _tobeUpdateUser = new();
    private string _searchString = "";
    private SearchType _searchType;
    private bool _showArchivedUsers;
    private bool _showCreateUserSection;
    private bool _showUpdateUserSection;
    private bool _showSkillList = false;
    string alertMessage = "";
    private IEnumerable<UserModel> UsersFiltered
    {
        get => _showArchivedUsers ? _users : _users.Where(x => !x.IsArchived);
    }


    protected override async Task OnInitializedAsync()
    {
        _users = await UserService.GetUsersAsync();
        _skillList = await SkillService.GetSkillList();
        _hobbyList = await HobbyService.GetHobbyList();
    }


    void ToggleArchived() => _showArchivedUsers = !_showArchivedUsers;

    async Task ArchiveUser(UserModel user)
    {
        var isSuccess = await UserService.ArchiveUserAsync(user.Id);
        if (isSuccess) user.IsArchived = true;
    }

    async Task UnarchiveUser(UserModel user)
    {
        var isSuccess = await UserService.UnarchiveUserAsync(user.Id);
        if (isSuccess) user.IsArchived = false;
    }

    async Task SearchUser()
    {
        var users = await UserService.SearchUsers(_searchString, _searchType);
        _users = users;
    }

    async Task CreateUser()
    {

    }

    async Task UpdateUser()
    {
        alertMessage = "";
        var isUpdated = await UserService.UpdateUser(_tobeUpdateUser);

        alertMessage = isUpdated
            ? "Successfully Updated."
            : $"Failed to update user {_tobeUpdateUser.UserName}";
    }

    void ShowHobbyList()
    {

    }

    void ShowSkillList()
    {

    }

    // async Task InsertNewSkillAndUpdateUser(user)
    // {
    //
    // }

    async Task ToggleCreateUserSection()
    {
        _showCreateUserSection = !_showCreateUserSection;
        // var _skillList = await SkillService.GetSkillList();
        // var result = await HobbyService.GetHobbyList();
    }

    void ToggleUpdateUserSection(UserModel user)
    {
        _tobeUpdateUser = user;
        _showUpdateUserSection = !_showUpdateUserSection;
    }

    public enum SearchType
    {
        Email,
        Username
    }


}